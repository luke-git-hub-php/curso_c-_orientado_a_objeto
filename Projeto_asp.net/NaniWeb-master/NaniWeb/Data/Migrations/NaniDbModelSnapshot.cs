// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using NaniWeb.Data.Entities;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NaniWeb.Data.Migrations
{
    [DbContext(typeof(NaniDb))]
    partial class NaniDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:Statuses", "Ongoing,Completed,Dropped")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex");

                b.ToTable("Roles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("RoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex");

                b.ToTable("Users");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("UserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("UserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("UserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("UserTokens");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Announcement", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("Date")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<bool>("Visible")
                    .HasColumnType("boolean");

                b.HasKey("Id");

                b.ToTable("Announcement");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Chapter", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("ChapterType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("Date")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<decimal>("Number")
                    .HasColumnType("numeric");

                b.Property<Guid>("SeriesId")
                    .HasColumnType("uuid");

                b.Property<bool>("Visible")
                    .HasColumnType("boolean");

                b.Property<decimal>("Volume")
                    .HasColumnType("numeric");

                b.HasKey("Id");

                b.HasIndex("SeriesId");

                b.HasIndex("Number", "SeriesId");

                b.ToTable("Chapter");

                b.HasDiscriminator<string>("ChapterType").HasValue("Chapter");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Link", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<bool>("Active")
                    .HasColumnType("boolean");

                b.Property<string>("Destination")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("Link");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Page", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<bool>("Animated")
                    .HasColumnType("boolean");

                b.Property<Guid>("ChapterId")
                    .HasColumnType("uuid");

                b.Property<string>("PageType")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("ChapterId");

                b.ToTable("Page");

                b.HasDiscriminator<string>("PageType").HasValue("Page");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Resource", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("FileName")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Resource");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Series", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Artist")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Author")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("DiscordReactionName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<decimal>("DiscordRoleId")
                    .HasColumnType("numeric(20,0)");

                b.Property<bool>("NSFW")
                    .HasColumnType("boolean");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("OriginalName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PreviousChaptersUrl")
                    .HasColumnType("text");

                b.Property<string>("SeriesType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<Series.Statuses>("Status")
                    .HasColumnType("\"Statuses\"");

                b.Property<string>("Synopsis")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string[]>("Tags")
                    .IsRequired()
                    .HasColumnType("text[]");

                b.Property<string>("UrlSlug")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<bool>("Visible")
                    .HasColumnType("boolean");

                b.HasKey("Id");

                b.HasIndex("DiscordReactionName")
                    .IsUnique();

                b.HasIndex("DiscordRoleId")
                    .IsUnique();

                b.HasIndex("Name")
                    .IsUnique();

                b.HasIndex("OriginalName")
                    .IsUnique();

                b.HasIndex("UrlSlug")
                    .IsUnique();

                b.ToTable("Series");

                b.HasDiscriminator<string>("SeriesType").HasValue("Series");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.ComicChapter", b =>
            {
                b.HasBaseType("NaniWeb.Data.Entities.Chapter");

                b.Property<decimal>("MangadexId")
                    .HasColumnType("numeric(20,0)");

                b.HasDiscriminator().HasValue("ComicChapter");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.NovelChapter", b =>
            {
                b.HasBaseType("NaniWeb.Data.Entities.Chapter");

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasDiscriminator().HasValue("NovelChapter");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.ComicPage", b =>
            {
                b.HasBaseType("NaniWeb.Data.Entities.Page");

                b.Property<int>("Number")
                    .HasColumnType("integer");

                b.HasIndex("Number", "ChapterId");

                b.HasDiscriminator().HasValue("ComicPage");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.NovelPage", b =>
            {
                b.HasBaseType("NaniWeb.Data.Entities.Page");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasIndex("Name")
                    .IsUnique();

                b.HasDiscriminator().HasValue("NovelPage");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Comic", b =>
            {
                b.HasBaseType("NaniWeb.Data.Entities.Series");

                b.Property<bool>("LongStrip")
                    .HasColumnType("boolean");

                b.Property<decimal>("MangadexId")
                    .HasColumnType("numeric(20,0)");

                b.HasDiscriminator().HasValue("Comic");
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Novel", b =>
            {
                b.HasBaseType("NaniWeb.Data.Entities.Series");

                b.HasDiscriminator().HasValue("Novel");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Chapter", b =>
            {
                b.HasOne("NaniWeb.Data.Entities.Series", "Series")
                    .WithMany("Chapters")
                    .HasForeignKey("SeriesId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("NaniWeb.Data.Entities.Page", b =>
            {
                b.HasOne("NaniWeb.Data.Entities.Chapter", "Chapter")
                    .WithMany("Pages")
                    .HasForeignKey("ChapterId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}